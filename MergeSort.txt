//HW5 CSE674
//Due: Sunday (Nov. 5) at 11:59PM
//You need to implement the following three functions
//
//void merge_sort(node * p, int i);
//void merge(node * p1, int i1, node * p2, int i2);
//void merge_sort(vector<int> &V);
//Read the requirements stated below.
#include "stdafx.h"

#include <iostream>
#include <vector>
#include <fstream>
#include<algorithm>
using namespace std;


class node {
public:
	int value;
	node * next;
	node() { next = nullptr; }
	node(int i) { value = i; next = nullptr; }
};


class linked_list {
public:
	int num_nodes;
	node * head;
	linked_list() { num_nodes = 0; head = nullptr; }
	void make_list(int k, int m);
	void print();
	//****************************************************************************************************************************************
	void merge_sort(node * p, int i); //Sort the portion (i nodes) of linked list beginning at the node pointed by p.
									  //You will implement the algoeithm using a recursive approach.
									  //In-place merge sort is required; that is, you are not allowed to create a separate linked list, etc. to perform sorting.


									  //You need to also implement the following merge funciton, which
									  //merges two already sorted porttion of linked list beginning at nodes pointed by p1 and p2, with sizes being i1 nodes and i2 nodes, respectively.
									  //Assume that these two portions are adjacent.
									  //That is, the last node of the first portion is immediately followed by the first node of the second portion.


	void merge(node * p1, int i1, node * p2, int i2);
	//*******************************************************************************************************************************************
};

void linked_list :: merge_sort(node * p, int i)
{
	if (i > 1)
	{
		//cout << "\n Calling ms_"<< i/2  << endl;
		merge_sort(p, i/2);
		node* p1 = p;
		for (int j = 0; j < i/2; j++)
			p1 = p1 -> next;
		//cout << "\n  Calling ms_" << (i - i / 2) << endl;
		merge_sort(p1, i-i/2);

		merge(p, i/2, p1, i-(i/2));
	}
}

void linked_list::merge(node * p1, int i1, node * p2, int i2)
{
	//cout << "\nmerging list starting with " << p1->value << " of " << i1 << " nodes and list starting with " << p2->value << " of "<<i2 << "nodes " << endl;		
	
	node *current;
	int i = 0, j = 0;

	node* last = p2;
	// storing the last pointer
	int cnt = 0;
	while (cnt < i2)
	{
		last = last->next;
		cnt++;
	}
	if (p1->value > p2->value)
	{
		int data = p1->value;
		p1->value = p2->value;
		p2->value = data;

		node *ptr = p2;
		int cnt2 = 0;
		while (ptr->next!= nullptr && ptr->value > ptr->next->value && cnt2 < i2-1)
		{
			int temp = ptr->value;
			ptr->value = ptr->next->value;
			ptr->next->value = temp;
			ptr = ptr->next;
			cnt2++;
		}
	}
	node *head = p1;
	current = p1;
	p1 = p1->next;
	i++;
	while (i < i1 && j < i2)
	{
		if (p1->value < p2->value)
		{
			current->next = p1;
			current = current->next;
			p1 = p1->next;
			i++;
		}
		else
		{
			current->next = p2;
			current = current->next;
			p2 = p2->next;
			j++;
		}
	}
	while (i < i1)
	{
		current->next = p1;
		p1 = p1->next;
		i++;
		current = current->next;

	}
	while (j < i2)
	{
		current->next = p2;
		p2 = p2->next;
		j++;
		current = current->next;
	}
	current->next = last;
	/*while (head != last)
	{
		cout << " " << head->value;
		head = head->next;
	}*/
	//cout << "\n";
	
}

void linked_list::make_list(int k, int m) {
	for (int i = 0; i < k; i++) {
		node * p = new node(rand() % m);
		p->next = head;
		head = p;
		num_nodes++;
	}
}


void linked_list::print() {
	node * p = head;
	cout << endl;
	while (p != nullptr) {
		cout << p->value << " ";
		p = p->next;
	}
}

void make_random_vector(vector<int> &V, int k, int m) {
	for (int i = 0; i < k; i++) V.push_back(rand() % m);
}


/* Function to merge the two half arrays arr[1..m] and arr[m+1..r] */
void merge(vector<int>& v, int l, int m, int r)
{	
	int i, j, k;
	int n1 = m - l+1;
	int n2 = r - m;

	// Create temp vector 
	vector<int> first(n1);
	vector<int> second(n2);

	// Copy data to temp vectors l and r 
	for (i = 0; i < n1; i++)
	{
		first[i] = v[l + i];
	}

	for (j = 0; j < n2; j++)
	{
		second[j] = v[m + 1 + j];
	}

	/* Merge the first and second vectors into original */
	i = 0;
	j = 0;
	k = l;
	while (i < n1 && j < n2)
	{
		if (first[i] <= second[j])
		{
			v[k] = first[i];
			i++;
		}
		else
		{
			v[k] = second[j];
			j++;
		}
		k++;
	}
	/* Copy remaining elements */
	while (i < n1)
	{
		v[k] = first[i];
		i++;
		k++;
	}
	while (j < n2)
	{
		v[k] = second[j];
		j++;
		k++;
	}
	
}

//***********************************************************************************************************************
void merge_sort(vector<int> &V) //Using iterative (i.e., non_recursive) approach to implement merge sort.
//***********************************************************************************************************************
{
	int len = V.size();
	int current_size;
	int left_start;
	for (current_size = 1; current_size <= len-1; current_size = 2 * current_size)
	{
		// pick the starting point
		for (left_start = 0; left_start < len-1; left_start += 2 * current_size)
		{
			int mid = left_start + current_size - 1 < len-1 ? left_start + current_size - 1 : len-1;
			int first = left_start + 2 * current_size - 1;
			int second = len - 1;
			int right_end =  first < second ? first : second ;

			// merge sub arrays
			merge(V, left_start, mid, right_end);
		}
	}
	
}

int main() {

	vector<int> V;
	make_random_vector(V, 50, 40);
	cout << endl;
	for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";
	merge_sort(V);
	cout << endl;
	for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";

	linked_list L1;
	L1.make_list(30, 20);
	L1.print();
	L1.merge_sort(L1.head, L1.num_nodes);
	L1.print();

	getchar();
	getchar();
	return 0;
}


